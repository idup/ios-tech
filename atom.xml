<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[iOS技术演示]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://ios-tech.idup.club/"/>
  <updated>2015-12-16T03:49:50.000Z</updated>
  <id>http://ios-tech.idup.club/</id>
  
  <author>
    <name><![CDATA[iDUP Club]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Location]]></title>
    <link href="http://ios-tech.idup.club/2015/12/16/Location/"/>
    <id>http://ios-tech.idup.club/2015/12/16/Location/</id>
    <published>2015-12-16T03:41:42.000Z</published>
    <updated>2015-12-16T03:49:50.000Z</updated>
    <content type="html"><![CDATA[<p>本教程主要介绍如何在应用中使用定位和地图技术。 相应代码位于 <a href="https://github.com/idup/Location" target="_blank" rel="external">https://github.com/idup/Location</a></p>
<h4 id="1-新建项目">1.新建项目</h4><p><img src="/picture/6-1.png" alt=""></p>
<p>新建项目，只需选择普通的SingleViewApplication即可</p>
<h4 id="2-编辑Storyboard">2.编辑Storyboard</h4><p><img src="/picture/6-2.png" alt=""></p>
<p>在Storyboard中拖好页面及其对应控件，具体可参考Demo的storyboard，在本demo中主要由三个页面</p>
<p>1.一个页面用于显示CoreLocation获得的经纬度信息</p>
<p>2.一个页面用于显示MapView</p>
<p>3.还有一个页面用于显示地图的搜索结果</p>
<h4 id="3-创建ViewController">3.创建ViewController</h4><p><img src="/picture/6-3.png" alt=""></p>
<p>创建不同的ViewController用以操纵页面控件，并且将代码与相应页面绑定</p>
<p>1.CoreLocationViewController与显示经纬度信息的页面绑定</p>
<p>2.MapViewControllerMapView与显示MapView的页面绑定</p>
<p>3.MapSearchResultTableViewController与显示地图的搜索结果的页面绑定</p>
<h4 id="4-修改info-plist文件">4.修改info.plist文件</h4><p><img src="/picture/6-4.png" alt=""></p>
<p>在info.plist中添加两个字段，分别为NSLocationWhenInUseUsageDescription和 NSLocationAlwaysUsageDescription，并为其填入value，value的信息将会在申请定位权限时显示给用户</p>
<h4 id="5-ViewController代码编写">5.ViewController代码编写</h4><p>1.CoreLocationViewController中利用CoreLocation获得定位，并将获得的定位信息显示在页面上</p>
<p>2.MapViewController将用户的当前位置和用户的查找结果大头针显示在MapView</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本教程主要介绍如何在应用中使用定位和地图技术。 相应代码位于 <a href="https://github.com/idup/Location" target="_blank" rel="external">https://github.com/idup/Location]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Camera]]></title>
    <link href="http://ios-tech.idup.club/2015/12/16/Camera/"/>
    <id>http://ios-tech.idup.club/2015/12/16/Camera/</id>
    <published>2015-12-16T03:41:29.000Z</published>
    <updated>2015-12-16T03:48:56.000Z</updated>
    <content type="html"><![CDATA[<p>本教程主要介绍如何在应用中使用摄像头技术。 相应代码位于 <a href="https://github.com/idup/Camera" target="_blank" rel="external">https://github.com/idup/Camera</a></p>
<h4 id="1-新建项目">1.新建项目</h4><p>运行 Xcode ,选择 File-&gt;New-&gt;Project… (键盘快捷键是 Command + Shift + N )。 在新出现的窗又中,选择左 侧iOS部分的 Application ,然后选择右 边的 Single View Application (单窗又应用)模板,单击 Next 按钮。 在文本框 Product Name 中填入 Cassini , 在 Language 弹出式菜单中选择 Swift , 在 Devices 选择 iPhone 。确保标 题为 Use Core Data 的选择框未 被选中, 点击下一步按钮,单击创建按钮创建项目。</p>
<p><img src="/picture/5-1.png" alt=""></p>
<h4 id="2-拖拽界面并采用autolayout布局">2.拖拽界面并采用autolayout布局</h4><p>￼<br><img src="/picture/5-2.png" alt=""></p>
<p><img src="/picture/5-3.png" alt=""></p>
<p><img src="/picture/5-4.png" alt=""></p>
<h5 id="3-1实现action_sheet并初始化一个UIImagepicker">3.1实现action sheet并初始化一个UIImagepicker</h5><p>在swift中,action sheet 升级为 view controller,所以在使用的时候要先<br>init一个action sheet 然后添加相对应的action。<br>UIImagepicker 是对camera最简单的操作的API,我们可以相对容易地调 用UIImagepicker来实现平实对image操作的大部分功能,但是,当你有 更高级的自定义需求时,需要采用AVFoundation来更高级地自定义对多 媒体设备的操作。(详情见教程)</p>
<p><img src="/picture/5-5.png" alt=""></p>
<h5 id="3-2_实现UIImagepicker_delegate">3.2 实现UIImagepicker delegate</h5><p>继承 UIImagepicker delegate,实现它的delegate函数,就能够拿到 camera或者photo library中用户选择的图片或者视频。</p>
<p><img src="/picture/5-6.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本教程主要介绍如何在应用中使用摄像头技术。 相应代码位于 <a href="https://github.com/idup/Camera" target="_blank" rel="external">https://github.com/idup/Camera</a></]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Dropit]]></title>
    <link href="http://ios-tech.idup.club/2015/12/15/Dropit/"/>
    <id>http://ios-tech.idup.club/2015/12/15/Dropit/</id>
    <published>2015-12-15T15:51:29.000Z</published>
    <updated>2015-12-16T03:56:43.000Z</updated>
    <content type="html"><![CDATA[<p>本教程将介绍如何在应用中使用动画技术。 相应代码位于<a href="https://github.com/idup/Dropit" target="_blank" rel="external">https://github.com/idup/Dropit</a>。</p>
<p>应用程序界面如下：</p>
<p><img src="/picture/4-1.png" alt=""></p>
<p>运行Xcode并新建一个SingleView项目：</p>
<p><img src="/picture/4-2.png" alt=""></p>
<p>将项目命名为Dropit并设置好相应参数：</p>
<p><img src="/picture/4-3.png" alt=""></p>
<p>将项目中的ViewController.swift文件删除并创建用户自定义的控制类，命名为</p>
<p><img src="/picture/4-4.png" alt=""></p>
<p><img src="/picture/4-7.png" alt=""></p>
<p>在Main.storyboard中将原先ViewController的类设置为DropitViewController</p>
<p><img src="/picture/4-5.png" alt=""></p>
<p>拖动一个范型视图进入storyboard，并设置好autolayout</p>
<p><img src="/picture/4-6.png" alt=""></p>
<p><img src="/picture/4-8.png" alt=""></p>
<p><img src="/picture/4-10.png" alt=""></p>
<p>选择show the assistant editor视图模式以同时展示代码与storyboard</p>
<p><img src="/picture/4-9.png" alt=""><br>将刚拖入的view按住control并拖至代码中</p>
<p><img src="/picture/4-11.png" alt=""></p>
<p>再拖入一个手势点击识别器（tap gesture recognizer），并与代码相连</p>
<p><img src="/picture/4-12.png" alt=""></p>
<p><img src="/picture/4-13.png" alt=""></p>
<p>打开DropitViewController.swift代码窗口，并在class DropitViewController: UIViewController {} 中添加如下代码来绘制随机小方块</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dropsPerRow = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dropSize: <span class="type">CGSize</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> size = gameView.bounds.size.width / <span class="type">CGFloat</span>(dropsPerRow)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">CGSize</span>(width: size, height: size)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">drop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> frame = <span class="type">CGRect</span>(origin: <span class="type">CGPointZero</span>, size: dropSize)</span><br><span class="line">    frame.origin.x = <span class="type">CGFloat</span>.random(dropsPerRow) * dropSize.width</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dropView = <span class="type">UIView</span>(frame: frame)</span><br><span class="line">    dropView.backgroundColor = <span class="type">UIColor</span>.random</span><br><span class="line"></span><br><span class="line">    gameView.addSubview(dropView)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    animator.addBehavior(gravity)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在class外添加如下代码实现扩展</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">CGFloat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="func"><span class="keyword">func</span> <span class="title">random</span><span class="params">(<span class="built_in">max</span>: Int)</span></span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">CGFloat</span>(arc4random() % <span class="type">UInt32</span>(<span class="built_in">max</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">extension</span> <span class="title">UIColor</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">random</span>: <span class="title">UIColor</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> arc4random()%<span class="number">5</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="type">UIColor</span>.greenColor()</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="type">UIColor</span>.blueColor()</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="type">UIColor</span>.orangeColor()</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="type">UIColor</span>.redColor()</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> <span class="type">UIColor</span>.purpleColor()</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="type">UIColor</span>.blackColor()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击运行，多次点击iPhone模拟器屏幕，查看效果如下：</p>
<p><img src="/picture/4-14.png" alt=""></p>
<p>接下来，在class DropitViewController: UIViewController {} 中添加如下代码来给小方块增加重力下降效果，其中需要使用lazy initialization的方法来初始化animator</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gravity = <span class="type">UIGravityBehavior</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> animator: <span class="type">UIDynamicAnimator</span> = &#123;</span><br><span class="line">    <span class="keyword">let</span> lazilyCreatedDynamicAnimator = <span class="type">UIDynamicAnimator</span>(referenceView: <span class="keyword">self</span>.gameView)</span><br><span class="line">    <span class="keyword">return</span> lazilyCreatedDynamicAnimator</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">    animator.addBehavior(gravity)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/picture/4-15.png" alt=""></p>
<p>在drop()方法末尾添加如下代码以增加重力效果：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gravity.<span class="function"><span class="title">addItem</span><span class="params">(dropView)</span></span></span><br></pre></td></tr></table></figure>
<p>点击运行，多次点击iPhone模拟器屏幕，效果如右图。<br>此时，在class DropitViewController: UIViewController {} 中添加如下代码来使小方块不落出屏幕：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> collider: <span class="type">UICollisionBehavior</span> = &#123;</span><br><span class="line">      <span class="keyword">let</span> lazilyCreatedCollision = <span class="type">UICollisionBehavior</span>()</span><br><span class="line">      <span class="comment">//configure here</span></span><br><span class="line">      <span class="comment">//edges of reference view are going to be a boundary</span></span><br><span class="line">      lazilyCreatedCollision.translatesReferenceBoundsIntooundary = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span> lazilyCreatedCollision</span><br><span class="line">  &#125;()</span><br></pre></td></tr></table></figure>
<p>在viewDidLoad()末尾添加如下代码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animator.<span class="function"><span class="title">addBehavior</span><span class="params">(collider)</span></span></span><br></pre></td></tr></table></figure>
<p>在drop()末尾添加如下代码：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collider.<span class="function"><span class="title">addItem</span><span class="params">(dropView)</span></span></span><br></pre></td></tr></table></figure>
<p>点击运行，多次点击iPhone模拟器屏幕，效果如右图：</p>
<p><img src="/picture/4-16.png" alt=""></p>
<p><img src="/picture/4-17.png" alt=""></p>
<p>此时创建一个DropitBehavior类，用于统一设置小方块的动画，创建方式如上图，代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DropitBehavior</span>: <span class="title">UIDynamicBehavior</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> gravity = <span class="type">UIGravityBehavior</span>()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> collider: <span class="type">UICollisionBehavior</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> lazilyCreatedCollision = <span class="type">UICollisionBehavior</span>()</span><br><span class="line">        lazilyCreatedCollision.translatesReferenceBoundsIntoBoundary = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> lazilyCreatedCollision</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        addChildBehavior(gravity)</span><br><span class="line">        addChildBehavior(collider)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">addDrop</span><span class="params">(drop: UIView)</span></span>&#123;</span><br><span class="line">        dynamicAnimator?.referenceView?.addSubview(drop)</span><br><span class="line">        gravity.addItem(drop)</span><br><span class="line">        collider.addItem(drop)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">removeDrop</span><span class="params">(drop: UIView)</span></span>&#123;</span><br><span class="line">        gravity.removeItem(drop)</span><br><span class="line">        collider.removeItem(drop)</span><br><span class="line">        drop.removeFromSuperview()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在DropitViewController.swift中进行如下修改（红色为修改部分）：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dropitBehavior = <span class="type">DropitBehavior</span>()</span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">drop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> frame = <span class="type">CGRect</span>(origin: <span class="type">CGPointZero</span>, size: dropSize)</span><br><span class="line">        frame.origin.x = <span class="type">CGFloat</span>.random(dropsPerRow) * dropSize.width</span><br><span class="line">        <span class="keyword">let</span> dropView = <span class="type">UIView</span>(frame: frame)</span><br><span class="line">        dropView.backgroundColor = <span class="type">UIColor</span>.random</span><br><span class="line">        gameView.addSubview(dropView)</span><br><span class="line">        dropitBehavior.addDrop(dropView)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        animator.addBehavior(dropitBehavior)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>再次运行，查看结果，与之前相符即可。</p>
<p>此时在DropitViewController.swift中添加如下代码（红色部分为添加），添加小方块的跳跃程度并设置碰撞后不旋转：</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">lazy var dropBehavior: UIDynamicItemBehavior = &#123;</span><br><span class="line">        let lazilyCreatedDropBehavior = UIDynamicItemBehavior()</span><br><span class="line">        lazilyCreatedDropBehavior.allowsRotation = <span class="literal">false</span></span><br><span class="line">        lazilyCreatedDropBehavior.elasticity = <span class="number">0.75</span></span><br><span class="line">        return lazilyCreatedDropBehavior</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">override init() &#123;</span><br><span class="line">        super.init()</span><br><span class="line">        addChildBehavior(gravity)</span><br><span class="line">        addChildBehavior(collider)</span><br><span class="line">        addChildBehavior(dropBehavior)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func addDrop(<span class="built_in">drop</span>: UIView)&#123;</span><br><span class="line">        dynamicAnimator?.referenceView?.addSubview(<span class="built_in">drop</span>)</span><br><span class="line">        gravity.<span class="built_in">addItem</span>(<span class="built_in">drop</span>)</span><br><span class="line">        collider.<span class="built_in">addItem</span>(<span class="built_in">drop</span>)</span><br><span class="line">        dropBehavior.<span class="built_in">addItem</span>(<span class="built_in">drop</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func removeDrop(<span class="built_in">drop</span>: UIView)&#123;</span><br><span class="line">        gravity.<span class="built_in">removeItem</span>(<span class="built_in">drop</span>)</span><br><span class="line">        collider.<span class="built_in">removeItem</span>(<span class="built_in">drop</span>)</span><br><span class="line">        dropBehavior.<span class="built_in">removeItem</span>(<span class="built_in">drop</span>)</span><br><span class="line">        <span class="built_in">drop</span>.removeFromSuperview()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行，小方块碰撞后不再旋转，并且弹跳力增强，结果如右图：</p>
<p><img src="/picture/4-19.png" alt=""></p>
<p>此时，在DropitViewController.swift中添加如下代码，使得小方块在动画结束后从最底层开始检查，若一层叠满则消除一层（类似俄罗斯方块的效果）：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">removeCompletedRow</span><span class="params">()</span> &#123;</span></span><br><span class="line">    <span class="variable"><span class="keyword">var</span> dropsToRemove</span> = [UIView]()</span><br><span class="line">    <span class="variable"><span class="keyword">var</span> dropFrame</span> = CGRect(x: <span class="number">0</span>, y: gameView.frame.maxY, width: dropSize.width, height: dropSize.height)</span><br><span class="line"></span><br><span class="line">    repeat &#123;</span><br><span class="line">        dropFrame.origin.y -= dropSize.height</span><br><span class="line">        dropFrame.origin.x = <span class="number">0</span></span><br><span class="line">        <span class="variable"><span class="keyword">var</span> dropsFound</span> = [UIView]()</span><br><span class="line">        <span class="variable"><span class="keyword">var</span> rowIsComplete</span> = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span> ..<span class="type">&lt; dropsPerRow &#123;</span><br><span class="line">            if let hitView = gameView.hitTest(CGPoint(x: dropFrame.midX, y: dropFrame.midY), withEvent: nil) &#123;</span><br><span class="line">                if hitView.superview == gameView &#123;</span><br><span class="line">                    dropsFound.append(hitView)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    rowIsComplete = false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dropFrame.origin.x += dropSize.width</span><br><span class="line">        &#125;</span><br><span class="line">        if rowIsComplete &#123;</span><br><span class="line">            dropsToRemove += dropsFound</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while dropsToRemove.count == 0 &amp;&amp; dropFrame.origin.y &gt;</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> drop <span class="keyword">in</span> dropsToRemove &#123;</span><br><span class="line">        dropitBehavior.removeDrop(drop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>给DropitViewController类添加代理方法，使animator成为自己的代理</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DropitViewController</span>: <span class="typename">UIViewController</span>, <span class="typename">UIDynamicAnimatorDelegate</span></span></span><br><span class="line"></span><br><span class="line">lazy <span class="variable"><span class="keyword">var</span> animator</span>: UIDynamicAnimator = &#123;</span><br><span class="line">        let lazilyCreatedDynamicAnimator = UIDynamicAnimator(referenceView: self.gameView)</span><br><span class="line">        lazilyCreatedDynamicAnimator.delegate = self</span><br><span class="line">        <span class="keyword">return</span> lazilyCreatedDynamicAnimator</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>
<p>在DropitViewController.swift中添加如下代码，使动画全部结束后开始进行消除工作：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">dynamicAnimatorDidPause</span></span>(<span class="symbol">animator:</span> <span class="constant">UIDynamicAnimator</span>) &#123;</span><br><span class="line">        removeCompletedRow()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在DropitBehavior.swift中将旋转打开</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> dropBehavior: <span class="type">UIDynamicItemBehavior</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> lazilyCreatedDropBehavior = <span class="type">UIDynamicItemBehavior</span>()</span><br><span class="line">        lazilyCreatedDropBehavior.allowsRotation = <span class="literal">false</span></span><br><span class="line">        lazilyCreatedDropBehavior.elasticity = <span class="number">0.75</span></span><br><span class="line">        <span class="keyword">return</span> lazilyCreatedDropBehavior</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>
<p>运行，并查看结果。</p>
<p>接下来为界面中心添加一个圆形的障碍物，在DropitBehavior.swift中添加如下代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">addBarrier</span><span class="params">(path: UIBezierPath, named name: String)</span></span> &#123;</span><br><span class="line">    collider.removeBoundaryWithIdentifier(name)</span><br><span class="line">    collider.addBoundaryWithIdentifier(name, forPath: path)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/picture/4-20.png" alt=""></p>
<p>创建一个BezierPathsView类，用于障碍物的绘制，过程如下：</p>
<p>BezierPathView的实现：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BezierPathsView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> bezierPaths = [<span class="type">String</span>:<span class="type">UIBezierPath</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">setPath</span><span class="params">(path: UIBezierPath?, named name: String)</span></span> &#123;</span><br><span class="line">        bezierPaths[name] = path</span><br><span class="line">        setNeedsDisplay()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">drawRect</span><span class="params">(rect: CGRect)</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="number">_</span>, path) <span class="keyword">in</span> bezierPaths &#123;</span><br><span class="line">            path.stroke()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>切换至storyboard，使gameView继承BezierPathView：</p>
<p><img src="/picture/4-21.png" alt=""></p>
<p>在DropitViewController.swift中修改如下代码使gameView继承BezierPathView：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> gameView: <span class="type">BezierPathsView</span>!</span><br></pre></td></tr></table></figure>
<p>在DropitViewController.swift中添加如下代码，绘制连线：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">    <span class="keyword">let</span> barrierSize = dropSize</span><br><span class="line">    <span class="keyword">let</span> barrierOrigin = <span class="type">CGPoint</span>(x: gameView.bounds.midX-barrierSize.width/<span class="number">2</span>, y: gameView.bounds.midY-barrierSize.height/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> path = <span class="type">UIBezierPath</span>(ovalInRect: <span class="type">CGRect</span>(origin: barrierOrigin, size: barrierSize))</span><br><span class="line">    dropitBehavior.addBarrier(path, named: <span class="type">PathNames</span>.<span class="type">MiddleBarrier</span>)</span><br><span class="line">    gameView.setPath(path, named: <span class="type">PathNames</span>.<span class="type">MiddleBarrier</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lastDroppedView: <span class="type">UIView</span>?</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">@IBAction</span> <span class="func"><span class="keyword">func</span> <span class="title">grabDrop</span><span class="params">(sender: UIPanGestureRecognizer)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> gesturePoint = sender.locationInView(gameView)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> sender.state &#123;</span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Began</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> viewToAttachTo = lastDroppedView &#123;</span><br><span class="line">            attachment = <span class="type">UIAttachmentBehavior</span>(item: viewToAttachTo, attachedToAnchor: gesturePoint)</span><br><span class="line">            lastDroppedView = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Changed</span>:</span><br><span class="line">        attachment?.anchorPoint = gesturePoint</span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Ended</span>:</span><br><span class="line">        attachment = <span class="literal">nil</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> attachment: <span class="type">UIAttachmentBehavior</span>? &#123;</span><br><span class="line">    <span class="keyword">willSet</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> attachment != <span class="literal">nil</span> &#123;</span><br><span class="line">            animator.removeBehavior(attachment!)</span><br><span class="line">            gameView.setPath(<span class="literal">nil</span>, named: <span class="type">PathNames</span>.<span class="type">Attachment</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">didSet</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> attachment != <span class="literal">nil</span> &#123;</span><br><span class="line">            animator.addBehavior(attachment!)</span><br><span class="line">            attachment?.action = &#123; [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span>  <span class="comment">//fix memory cycle problem</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">let</span> attachedView = <span class="keyword">self</span>.attachment?.items.first <span class="keyword">as</span>? <span class="type">UIView</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> path = <span class="type">UIBezierPath</span>()</span><br><span class="line">                    path.moveToPoint(<span class="keyword">self</span>.attachment!.anchorPoint)</span><br><span class="line">                    path.addLineToPoint(attachedView.center)</span><br><span class="line">                    <span class="keyword">self</span>.gameView.setPath(path, named: <span class="type">PathNames</span>.<span class="type">Attachment</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在drop()和PathNames中做如下修改：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">drop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> frame = <span class="type">CGRect</span>(origin: <span class="type">CGPointZero</span>, size: dropSize)</span><br><span class="line">    frame.origin.x = <span class="type">CGFloat</span>.random(dropsPerRow) * dropSize.width</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> dropView = <span class="type">UIView</span>(frame: frame)</span><br><span class="line">    dropView.backgroundColor = <span class="type">UIColor</span>.random</span><br><span class="line"></span><br><span class="line">    gameView.addSubview(dropView)</span><br><span class="line"></span><br><span class="line">    lastDroppedView = dropView</span><br><span class="line"></span><br><span class="line">    dropitBehavior.addDrop(dropView)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PathNames</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">MiddleBarrier</span> = <span class="string">"Middle Barrier"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">Attachment</span> = <span class="string">"Attachment"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>点击运行，动画小游戏完成</p>
<p><img src="/picture/4-22.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本教程将介绍如何在应用中使用动画技术。 相应代码位于<a href="https://github.com/idup/Dropit" target="_blank" rel="external">https://github.com/idup/Dropit</a>。</p>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bouncer]]></title>
    <link href="http://ios-tech.idup.club/2015/12/15/Bouncer/"/>
    <id>http://ios-tech.idup.club/2015/12/15/Bouncer/</id>
    <published>2015-12-15T15:51:29.000Z</published>
    <updated>2015-12-16T03:56:57.000Z</updated>
    <content type="html"><![CDATA[<p>本教程将介绍如何在应用中使用手势和传感器技术。 相应代码位于<a href="https://github.com/idup/Bouncer" target="_blank" rel="external">https://github.com/idup/Bouncer</a>。</p>
<p><img src="/picture/3-1.png" alt=""></p>
<h3 id="1-新建项目">1.新建项目</h3><p>运行Xcode，选择File-&gt;New-&gt;Project…(键盘快捷键是Command + Shift + N)。在新出现的窗口中，选择左侧iOS部分的Application，然后选择右边的Single View Application（单窗口应用）模板，单击Next按钮。<br>在文本框Product Name中填入Bouncer, 在Language弹出式菜单中选择Swift，在Devices弹出式菜单中选择iPhone。确保标题为Use Core Data的选择框未被选中，点击下一步按钮,单击创建按钮创建项目。</p>
<p><img src="/picture/3-2.png" alt=""></p>
<h3 id="2-Core_Motion">2.Core Motion</h3><p>Core Motion对CMMotionManager,CMAccelerometerData,CMDeviceMotion, CMGyroData进行了很好的封装,可以让开发者进行方便的管理。<br>￼<br>CMMotionManager可以访问所有从iOS设备上获取的Core Motion数据。主要方式 分为pull和push两种,pull需要手动向manager索要数据,即最近一次的采样数据, 而push方式则是自动在每一个采样数据到来的时候执行闭包里面的函数进行处理。</p>
<p><img src="/picture/3-3.png" alt=""></p>
<h4 id="2-1加速计原理">2.1加速计原理</h4><p>iPhone的加速度计有三个轴,分别是x轴、y轴、z轴,如上图所示。这是一个三 维立体空间,可以捕获用户每一个角度的操作。通过这三个轴可以计算iPhone倾斜的 角度,从而计算出加速度。</p>
<p>(1)对于iphone手机来说,画面上下为y轴,左右为z轴,贯穿屏幕为z轴。</p>
<p>(2)向上,向右,手机的前面分别是各轴的正方向。</p>
<h4 id="2-2加速计使用步骤">2.2加速计使用步骤</h4><p>(1)实例化CMMotionManager类</p>
<p>(2)向CMMotionManager的accelerometerUpdateInterval属性中设置通知间隔 时间值。</p>
<p>(3)使用NSOperationQueue.currentQueue()建立一个监听队列。</p>
<p>(4)使用startAccelerometerUpdatesToQueue方法更新监听队列,并设置回调 函数用于接受加速度通知。在回调函数中使用accelerometerData.acceleration相关 属性可以获取x、y、z各个方向的加速度。</p>
<h4 id="2-3频率设置建议">2.3频率设置建议</h4><p>accelerometerUpdateInterval表示通知频率,表示间隔多少秒通知一次。 iPhone开发文档中推荐使用的通知间隔如下:</p>
<p>(1)检测设备朝向:1/10 ~ 1/20</p>
<p>(2)在游戏中需要实时使用加速传感器时:1/30 ~ 1/60</p>
<p>(3)检测敲击设备或者剧烈摇动设备的情况下:1/70 ~ 1/100</p>
<h3 id="3-code">3.code</h3><p>相关代码请参考Demo</p>
<h4 id="3-1AppDelegate-swift">3.1AppDelegate.swift</h4><p>打开AppDelegate.swift代码窗口,删除class内代码,由于APP中所有用 CoreMotion的对象都需要使用同一个实例,所以需要在AppDelegate中新建Manager, 代码如下。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Motion</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">Manager</span> = <span class="type">CMMotionManager</span>()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>当然,首先应该导入CoreMotion库。</p>
<figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"><span class="keyword">import</span> CoreMotion</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2BouncerBehavior-">3.2BouncerBehavior.</h4><p>在BouncerBehavior.swift中,我们封装了Bouncer需要用到的 UIDynamicBehavior。我们定义了gravity,collider,blockBehavior三个成员变 量,并对后两者进行了lazy init。</p>
<p>之所以使用lazy init,原因有二:</p>
<p>一来构造collider的时候有的东西不能使用,二来构造的时候需要设置属性。</p>
<p> blockBehavior可以改变动力元素的一些属性,如修改allowsRotation属性可以<br>设置元素是否可以旋转,修改elasticity属性决定碰撞是否为弹性碰撞,能量损耗是 多少等等。具体可以参见apple官网的开发者指南。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gravity = <span class="type">UIGravityBehavior</span>()</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> collider: <span class="type">UICollisionBehavior</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> lazilyCreatedCollider =</span><br><span class="line"><span class="type">UICollisionBehavior</span>()</span><br><span class="line">lazilyCreatedCollider.translatesReferenceBoundsIntoB</span><br><span class="line">oundary = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> lazilyCreatedCollider</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> blockBehavior: <span class="type">UIDynamicItemBehavior</span> =</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">let</span> lazilyCreatedBlockBehavior =</span><br><span class="line"><span class="type">UIDynamicItemBehavior</span>()</span><br><span class="line">        lazilyCreatedBlockBehavior.allowsRotation =</span><br><span class="line">        lazilyCreatedBlockBehavior.elasticity = <span class="number">0.85</span></span><br><span class="line">        lazilyCreatedBlockBehavior.friction = <span class="number">0</span></span><br><span class="line">        lazilyCreatedBlockBehavior.resistance = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> lazilyCreatedBlockBehavior</span><br><span class="line">&#125;()</span><br><span class="line">在重写的<span class="keyword">init</span>方法中,我们将gravity,collider,blockBehavior加入到当前 行为规则中。同时又添加了addBlock和removeBlock两个封装好的方法,用来添加和 移除遵循行为的对象。</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">        addChildBehavior(gravity)</span><br><span class="line">        addChildBehavior(collider)</span><br><span class="line">        addChildBehavior(blockBehavior)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">addBlock</span><span class="params">(block: UIView)</span></span> &#123;</span><br><span class="line">dynamicAnimator?.referenceView?.addSubview(block)</span><br><span class="line">        gravity.addItem(block)</span><br><span class="line">        collider.addItem(block)</span><br><span class="line">        blockBehavior.addItem(block)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">removeBlock</span><span class="params">(block: UIView)</span></span> &#123;</span><br><span class="line">        gravity.removeItem(block)</span><br><span class="line">        collider.removeItem(block)</span><br><span class="line">        blockBehavior.removeItem(block)</span><br><span class="line">        block.removeFromSuperview()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-3ViewController-swift">3.3ViewController.swift</h4><p>在ViewController.swift中我们做如下三件事:<br>首先,建立建立Animation Behavior,并且绑定当前view为UIDynamicAnimator的referenceView。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bouncer = <span class="type">BouncerBehavior</span>()</span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> animator: <span class="type">UIDynamicAnimator</span> =</span><br><span class="line">&#123; <span class="type">UIDynamicAnimator</span>(referenceView: <span class="keyword">self</span>.view) &#125;()</span><br></pre></td></tr></table></figure>
<p>其次,在View Controller的生命周期中控制数据采集的开始和结束,并向其中添加对象。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        animator.addBehavior(bouncer)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewDidAppear</span><span class="params">(animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidAppear(animated)</span><br><span class="line">        <span class="keyword">if</span> redBlock == <span class="literal">nil</span> &#123;</span><br><span class="line">            redBlock = addBlock()</span><br><span class="line">            redBlock?.backgroundColor =</span><br><span class="line"><span class="type">UIColor</span>.redColor()</span><br><span class="line">            bouncer.addBlock(redBlock!)</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">let</span> motionManager =</span><br><span class="line"><span class="type">AppDelegate</span>.<span class="type">Motion</span>.<span class="type">Manager</span></span><br><span class="line">        <span class="keyword">if</span> motionManager.accelerometerAvailable</span><br><span class="line">&#123; motionManager.startAccelerometerUpdatesToQueue(<span class="type">NSO</span></span><br><span class="line">perationQueue.mainQueue()) &#123; (data, error) -&gt; <span class="type">Void</span></span><br><span class="line"><span class="keyword">in</span></span><br><span class="line"><span class="keyword">self</span>.bouncer.gravity.gravityDirection = <span class="type">CGVector</span>(dx:</span><br><span class="line">data!.acceleration.x, dy: -data!.acceleration.y)</span><br><span class="line">&#125; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(animated: Bool)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewWillDisappear(animated)</span><br><span class="line"><span class="type">AppDelegate</span>.<span class="type">Motion</span>.<span class="type">Manager</span>.stopAccelerometerUpdates(</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后,还要封装addBlock方法,添加视图。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">var</span> redBlock: UIView?</span><br><span class="line">    func <span class="keyword">addBlock() </span>-&gt; UIView &#123;</span><br><span class="line">        let <span class="keyword">block </span>= UIView(frame: CGRect(origin:</span><br><span class="line"><span class="label">CGPoint.zero</span>, size: Constants.<span class="keyword">BlockSize))</span><br><span class="line"></span>        <span class="keyword">block.center </span>= CGPoint(x: view.<span class="keyword">bounds.midX,</span><br><span class="line"></span>y: view.<span class="keyword">bounds.midY)</span><br><span class="line"></span>        view.<span class="keyword">addSubview(block)</span><br><span class="line"></span>        return <span class="keyword">block</span><br><span class="line"></span>    &#125;</span><br><span class="line"><span class="keyword">struct </span>Constants &#123;</span><br><span class="line">        static let <span class="keyword">BlockSize </span>= CGSize(width: <span class="number">40</span>,</span><br><span class="line"><span class="label">height</span>: <span class="number">40</span>) &#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-运行项目">4.运行项目</h3><p>由于Xcode7之后支持直接进行真机调试而不需 要开发者账号,因此我们将设备与Mac连接后, 在模拟器列表中选择我们的设备,然后点击运 行即可(快捷键 Command + R)。</p>
<p><img src="p/icture/3-4.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本教程将介绍如何在应用中使用手势和传感器技术。 相应代码位于<a href="https://github.com/idup/Bouncer" target="_blank" rel="external">https://github.com/idup/Bouncer</a]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cassini]]></title>
    <link href="http://ios-tech.idup.club/2015/12/15/Cassini/"/>
    <id>http://ios-tech.idup.club/2015/12/15/Cassini/</id>
    <published>2015-12-15T15:51:17.000Z</published>
    <updated>2015-12-16T03:56:31.000Z</updated>
    <content type="html"><![CDATA[<p>本教程将介绍如何在应用中使用并发编程技术。 相应代码位于<a href="https://github.com/idup/Cassini" target="_blank" rel="external">https://github.com/idup/Cassini</a>。</p>
<p><img src="/picture/1-1.png" alt=""></p>
<h3 id="1-新建项目">1.新建项目</h3><p>运行 Xcode ，选择 File-&gt;New-&gt;Project… (键盘快捷键是 Command + Shift + N )。 在新出现的窗口中,选择左侧iOS部分的 Application ,然后选择右边的 Single View Application (单窗口应用)模板,单击 Next 按钮。</p>
<p>在文本框 Product Name 中填入 Cassini , 在 Language 弹出式菜单中选择 Swift , 在 Devices 选择 iPhone 。确保标题为 Use Core Data 的选择框未被选中, 点击下一步按钮,单击创建按钮创建项目。</p>
<p><img src="/picture/1-2.png" alt=""></p>
<h3 id="2-拖拽界面">2.拖拽界面</h3><p><img src="/picture/1-3.png" alt=""></p>
<p><img src="/picture/1-4.png" alt=""></p>
<p><img src="/picture/1-5.png" alt=""></p>
<p><img src="/picture/1-6.png" alt=""></p>
<p><img src="/picture/1-7.png" alt=""></p>
<p><img src="/picture/1-8.png" alt=""></p>
<p><img src="/picture/1-9.png" alt=""></p>
<p><img src="/picture/2-0.png" alt=""></p>
<h3 id="3-1_ImageViewController-swift">3.1 ImageViewController.swift</h3><p><img src="/picture/2-1.png" alt=""></p>
<p>TableViewController主要在点击Cell时，带上Cell.DetailTextLabel.text生成的NSURL对象，并赋值给Segue目标ViewController的属性。</p>
<h3 id="3-2_ImageViewController-swift">3.2 ImageViewController.swift</h3><p><img src="/picture/2-2.png" alt=""></p>
<p>这里是多线程最直观的实现。<br>通过GCD的dispatch_async方法提交一个闭包到global_queue上。<br>通过NSData同步方法(contentsOfUrl: String)获取URL中的数据。<br>同步方法会Block住这个线程，在这个方法未返回时，不会向后执行。<br>获取完数据后，通过GCD相同的方法提交闭包到mian_queue上，设置图片数据并显示。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本教程将介绍如何在应用中使用并发编程技术。 相应代码位于<a href="https://github.com/idup/Cassini" target="_blank" rel="external">https://github.com/idup/Cassini</a>。]]>
    </summary>
    
  </entry>
  
</feed>
